===========================
README FOR MULTIPLEXERS GP
===========================
Jonathan Ellis & Dror Dayan
===========================

1. COMPILING
============

The code has been developed in Java. It can be compiled with the Java compiler as follows:

javac Circuit.java

2. EXECUTING
============

The program is executed by running:

java Circuit <progname>

Where <progname> is one of the following program names:

- 6multiplexer
- 11multiplexer
- 16middle3

For example, to run the 11-multiplexer genetic program:

java Circuit 11multiplexer

The program will then run the 11-multiplexer using the appropriate parameters tuned for that
specific program.

NOTE: When running the 16middle3 program, the JVM heap space will get exhausted after a
relatively short time. To avoid this, you should increase the JVM maximum heap space and execute
16-middle-3 using the following command:

java -Xmx1g Circuit 16middle3

This will increase the heap to 1GB which should be available on most modern systems.

3. UNDERSTANDING OUTPUT
=======================

The system outputs data in the following format:

G> F\C\M	P

Where:-

- G is the generation number.
- F is the best fitness of that generation (out of C, see below).
- C is the subset of fitness cases being tested (when sampling is in effect).
- M is the total number of fitness cases for the current program.
- P is the genetic program yielding the best fitness of that generation using the regular
	infix notation for and, or and not. If is denoted in the ternary format used in Java
	(and some other languages). IF[x,y,z] is denoted as x ? y : z.
	
Once the algorithm has come up with a 100% correct solution, a line of asterisks will appear
followed immediately by the solution. The application will then terminate.
	
4. FURTHER QUESTIONS?
=====================

Email: j.ellis@cs.ucl.ac.uk or d.dayan@cs.ucl.ac.uk